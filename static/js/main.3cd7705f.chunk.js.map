{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/heapSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","pivot","quickSortHelper","swap","a","b","temp","lastIdx","getBubbleSortAnimations","myArray","bubbleSortHelper","heapify","arr","n","largest","l","r","ANIMATION_SPEED_MS","PRIMARY_COLOR","range","SECONDARY_COLOR","PIVOT_COLOR","SORTED_COLOR","SortingVisualizer","useState","heights","setArray","randomIntFromInterval","min","max","random","resetArray","bars","setRange","heapSort","getHeapSortAnimations","Promise","res","rej","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","textContent","done","useEffect","className","map","value","idx","width","margin","fontSize","type","id","onChange","e","target","onClick","mergeSort","quickSort","bubbleSort","href","class","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3cd7705f.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  // console.log(\"main \",array);\r\n  // console.log(\"auxi \",auxiliaryArray);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","export function getQuickSortAnimations(auxiliaryArray,pivot) {\r\n    const animations = [];\r\n    if (auxiliaryArray.length <= 1) return auxiliaryArray;\r\n    // const auxiliaryArray = array.slice();\r\n    quickSortHelper(auxiliaryArray, 0, auxiliaryArray.length - 1,pivot, animations);\r\n    // array.sort(function(a,b){\r\n    //     return a-b;\r\n    // });\r\n    // if(arraysAreEqual(array,auxiliaryArray)){\r\n    //     console.log(\"yes\");\r\n    // }\r\n    // else{\r\n    //     console.log(\"no\");\r\n    // }\r\n    // console.log(\"main \",array);\r\n    // console.log(\"auxi \",auxiliaryArray);\r\n    return animations;\r\n  }\r\n\r\n  function arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n      if (arrayOne[i] !== arrayTwo[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  function swap(auxiliaryArray,a,b){\r\n      let temp = auxiliaryArray[a];\r\n      auxiliaryArray[a]=auxiliaryArray[b];\r\n      auxiliaryArray[b]=temp;\r\n  }\r\n\r\n  function quickSortHelper(\r\n    auxiliaryArray,\r\n    startIdx,\r\n    endIdx,\r\n    pivot,\r\n    animations,\r\n  ) {\r\n    if (startIdx >= endIdx) return;\r\n    const lastIdx = endIdx;\r\n    pivot.push(lastIdx);\r\n    let i=startIdx;\r\n\r\n    // animations.push([lastIdx,m])\r\n    \r\n\r\n    for(let j=startIdx;j<endIdx;j++){\r\n        animations.push([i,j]);\r\n        animations.push([i,j]);\r\n        if(auxiliaryArray[j]<auxiliaryArray[lastIdx]){\r\n            swap(auxiliaryArray,j,i);\r\n            animations.push([i,auxiliaryArray[i]]);\r\n            animations.push([j,auxiliaryArray[j]]);\r\n            i++;\r\n        }\r\n        else{\r\n          animations.push([i,auxiliaryArray[i]]);\r\n          animations.push([j,auxiliaryArray[j]]);\r\n        }\r\n        \r\n    }\r\n    swap(auxiliaryArray,lastIdx,i);\r\n    animations.push([i,lastIdx]);\r\n    animations.push([i,lastIdx]);\r\n    animations.push([i,auxiliaryArray[i]]);\r\n    animations.push([lastIdx,auxiliaryArray[lastIdx]]);\r\n\r\n    quickSortHelper(auxiliaryArray,startIdx,i-1,pivot,animations);\r\n    quickSortHelper(auxiliaryArray,i+1,endIdx,pivot,animations);\r\n    \r\n    \r\n    // quickSortHelper(auxiliaryArray, startIdx, lastIdx, mainArray, animations);\r\n    // quickSortHelper(auxiliaryArray, lastIdx + 1, endIdx, mainArray, animations);\r\n    // doMerge(mainArray, startIdx, lastIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  ","export function getBubbleSortAnimations(myArray) {\r\n    const animations = [];\r\n    if (myArray.length <= 1) return myArray;\r\n    // const array = myArray.slice();\r\n    bubbleSortHelper(myArray, 0, myArray.length - 1, animations);\r\n    // array.sort(function(a,b){\r\n    //     return a-b;\r\n    // });\r\n    // if(arraysAreEqual(array,myArray)){\r\n    //     console.log(\"yes\");\r\n    // }\r\n    // else{\r\n    //     console.log(\"no\");\r\n    // }\r\n    // console.log(\"main \",array);\r\n    // console.log(\"auxi \",myArray);\r\n    return animations;\r\n  }\r\n\r\n  function arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n      if (arrayOne[i] !== arrayTwo[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  function swap(myArray,a,b){\r\n      let temp = myArray[a];\r\n      myArray[a]=myArray[b];\r\n      myArray[b]=temp;\r\n  }\r\n\r\n  function bubbleSortHelper(\r\n    myArray,\r\n    startIdx,\r\n    endIdx,\r\n    animations,\r\n  ) {\r\n\r\n    // animations.push([lastIdx,m])\r\n    \r\n    for(let i=endIdx;i>=0;i--){\r\n        for(let j=startIdx;j<i;j++){\r\n            animations.push([j,j+1]);\r\n            animations.push([j,j+1]);\r\n            if(myArray[j]>myArray[j+1]){\r\n                swap(myArray,j,j+1);\r\n            }\r\n            animations.push([j,myArray[j]]);\r\n            animations.push([j+1,myArray[j+1]]);\r\n            \r\n        }\r\n    }\r\n\r\n    \r\n    // quickSortHelper(myArray, startIdx, lastIdx, mainArray, animations);\r\n    // quickSortHelper(myArray, lastIdx + 1, endIdx, mainArray, animations);\r\n    // doMerge(mainArray, startIdx, lastIdx, endIdx, myArray, animations);\r\n  }\r\n  ","\r\nexport function getHeapSortAnimations(arr)\r\n{\r\n    var n = arr.length;\r\n    const animations = [];\r\n    if (n <= 1) return arr;\r\n    \r\n    // Build heap (rearrange array)\r\n    for (var i = Math.floor(n / 2) - 1; i >= 0; i--)\r\n        heapify(arr, n, i,animations);\r\n\r\n    // One by one extract an element from heap\r\n    // console.log(\"my array\",arr);\r\n    for (var i = n - 1; i > 0; i--) {\r\n        // Move current root to end\r\n        var temp = arr[0];\r\n        arr[0] = arr[i];\r\n        arr[i] = temp;\r\n        animations.push([0,i]);\r\n        animations.push([0,i]);\r\n        animations.push([0,arr[0]]);\r\n        animations.push([i,arr[i]]);\r\n        // call max heapify on the reduced heap\r\n        heapify(arr, i, 0,animations);\r\n    }\r\n    // console.log(\"animations\",animations);\r\n    return animations;\r\n}\r\n\r\nfunction heapify(arr, n, i,animations)\r\n{\r\n    // console.log(\"my array\",arr);\r\n    var largest = i; // Initialize largest as root\r\n    var l = 2 * i + 1; // left = 2*i + 1\r\n    var r = 2 * i + 2; // right = 2*i + 2\r\n    // animations.push([largest,l]);\r\n    \r\n    // If left child is larger than root\r\n    if (l < n && arr[l] > arr[largest])\r\n        largest = l;\r\n    // animations.push([i,l]);\r\n    // animations.push([i,l]);\r\n    // If right child is larger than largest so far\r\n    if (r < n && arr[r] > arr[largest])\r\n        largest = r;\r\n    animations.push([l,r]);\r\n    animations.push([l,r]);\r\n    // If largest is not root\r\n    if (largest != i) {\r\n        var swap = arr[i];\r\n        arr[i] = arr[largest];\r\n        arr[largest] = swap;\r\n        animations.push([i,arr[i]]);\r\n        animations.push([largest,arr[largest]]);\r\n        // Recursively heapify the affected sub-tree\r\n        heapify(arr, n, largest,animations);\r\n    }\r\n    else{\r\n        animations.push([l,arr[l]]);\r\n        animations.push([r,arr[r]]);\r\n    }\r\n}","import React,{useState,useEffect} from 'react';\r\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSort.js';\r\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort.js';\r\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSort.js';\r\nimport { getHeapSortAnimations } from '../sortingAlgorithms/heapSort.js';\r\nimport './SortingVisualizer.css';\r\nimport { range } from 'lodash';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 10;\r\n// const range = 100;\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = range;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = '#66BFBF';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\nconst PIVOT_COLOR = 'yellow';\r\nconst SORTED_COLOR = '#6b5b95';\r\nfunction SortingVisualizer() {\r\n\r\n  const [heights,setArray] = useState([]);\r\n  function randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  }\r\n  function resetArray(bars) {\r\n    const array = [];\r\n    for (let i = 0; i < bars; i++) {\r\n      array.push(randomIntFromInterval(30, 500));\r\n    }\r\n    setArray(array);\r\n    // setArray(array);\r\n    \r\n  }\r\n  const [range,setRange] = useState(115);\r\n  function handleChange(e){\r\n    setRange(e.target.value);\r\n    // console.log(\"e val > \",e.target.value);\r\n    // console.log(range);\r\n  }\r\n  useEffect(()=>{\r\n    resetArray(120);\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    resetArray(range);\r\n  },[range])\r\n\r\n  function mergeSort() {\r\n    const animations = getMergeSortAnimations(heights);\r\n    async function done(){\r\n      await new Promise((res,rej)=>{\r\n      for (let i = 0; i < animations.length;i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n        if (isColorChange) {\r\n          const [barOneIdx, barTwoIdx] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const barTwoStyle = arrayBars[barTwoIdx].style;\r\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n            // console.log(i);\r\n            // if(i===animations.length-1) res();\r\n            // i++;\r\n          }, 100*i*ANIMATION_SPEED_MS/range);\r\n        } else {\r\n          setTimeout(() => {\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            barOneStyle.height = `${newHeight}px`;\r\n            if(range<34) arrayBars[barOneIdx].textContent = `${newHeight}`;\r\n            if(i===animations.length-1) res();\r\n            // i++;\r\n          },100*i*ANIMATION_SPEED_MS/range);\r\n        }\r\n        // console.log(\"i >\",i);\r\n        \r\n    }\r\n    \r\n  })\r\n    for(let i=0;i<heights.length;i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      arrayBars[i].style.backgroundColor = SORTED_COLOR;\r\n    }\r\n    setTimeout(()=>{\r\n      for(let i=0;i<heights.length;i++){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n      }\r\n    },1000);\r\n  }\r\n  done();\r\n  }\r\n\r\n  function quickSort() {\r\n    // We leave it as an exercise to the viewer of this code to implement this method.\r\n    // console.log(\"quicksort\");\r\n    const pivot = [];\r\n    const animations = getQuickSortAnimations(heights,pivot);\r\n    // console.log(\"pivot  > \",pivot);\r\n    async function done(){\r\n      await new Promise((res,rej)=>{\r\n        let temp=0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 4 < 2;\r\n          // console.log(animations[i]);\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            \r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            \r\n            let color ;\r\n            \r\n            if(i%4===0) color=SECONDARY_COLOR;\r\n            else color=PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              const barPivotStyle = arrayBars[pivot[temp]].style;\r\n              barPivotStyle.backgroundColor = PIVOT_COLOR;\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n              \r\n            }, 100*i*ANIMATION_SPEED_MS/range);\r\n          } else {\r\n              setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n                if(range<34) arrayBars[barOneIdx].textContent = `${newHeight}`;\r\n                if(animations[i][0]===pivot[temp]) temp++;\r\n                // console.log(temp);\r\n                if(i===animations.length-1) res();\r\n              }, 100*i*ANIMATION_SPEED_MS/range);\r\n          }\r\n          \r\n        }\r\n    \r\n  })\r\n  for(let i=0;i<heights.length;i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      arrayBars[i].style.backgroundColor = SORTED_COLOR;\r\n    }\r\n    setTimeout(()=>{\r\n      for(let i=0;i<heights.length;i++){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n      }\r\n    },1000);\r\n  }\r\n  done();\r\n    \r\n\r\n\r\n  }\r\n\r\n  function heapSort() {\r\n    const animations = getHeapSortAnimations(heights);\r\n    // console.log(animations.length);\r\n    async function done(){\r\n      await new Promise((res,rej)=>{\r\n        var n=heights.length;\r\n        for (let i = 0; i < animations.length; i++) {\r\n          // console.log(animations[i]);\r\n          \r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 4 < 2;\r\n          if (isColorChange) {\r\n            if(animations[i][0]>=n || animations[i][1]>=n) continue;\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, 100*i*ANIMATION_SPEED_MS/range);\r\n          } else {\r\n            if(animations[i][0]>=n) continue;\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n              if(range<34) arrayBars[barOneIdx].textContent = `${newHeight}`;\r\n              if(i===animations.length-1) res();\r\n            }, 100*i*ANIMATION_SPEED_MS/range);\r\n          }\r\n        }\r\n  })\r\n    for(let i=0;i<heights.length;i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      arrayBars[i].style.backgroundColor = SORTED_COLOR;\r\n    }\r\n    setTimeout(()=>{\r\n      for(let i=0;i<heights.length;i++){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n      }\r\n    },1000);\r\n  }\r\n  done();\r\n    \r\n  }\r\n\r\n  function bubbleSort() {\r\n    const animations = getBubbleSortAnimations(heights);\r\n    // console.log(animations);\r\n    async function done(){\r\n      await new Promise((res,rej)=>{\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 4 < 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, 100*i*ANIMATION_SPEED_MS/range);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n              if(range<34) arrayBars[barOneIdx].textContent = `${newHeight}`;\r\n              if(i===animations.length-1) res();\r\n            }, 100*i*ANIMATION_SPEED_MS/range);\r\n          }\r\n        }\r\n        \r\n  })\r\n    for(let i=0;i<heights.length;i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      arrayBars[i].style.backgroundColor = SORTED_COLOR;\r\n    }\r\n    setTimeout(()=>{\r\n      for(let i=0;i<heights.length;i++){\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\r\n      }\r\n    },1000);\r\n\r\n  }\r\n  done();\r\n  }\r\n\r\n  function testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  }\r\n\r\n  function arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n      if (arrayOne[i] !== arrayTwo[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n    <div className=\"array-container\">\r\n        {heights.map((value, idx) => (\r\n          <div\r\n            className={range<150 ?    \"array-bar border border-dark fw-bolder \" : \"array-bar fw-bolder\"}\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n              width:`${500/range}px`,\r\n              margin: range<50 ? \"2px\" : \"1px\",\r\n              fontSize: range<16 ? range<11 ?'24px':'18px' : range <21 ? '12px' : '8px'\r\n            }}>{range<34 ? value : \"\" }</div>\r\n        ))}\r\n        </div>\r\n        <div className=\"btn-container\">\r\n        <div>\r\n        <input type=\"range\" min=\"6\" max=\"230\" value={range} className=\"col-md-4 slider mb-2\" id=\"myRange\" onChange={handleChange}></input>\r\n        </div>\r\n        <button className=\"btn text-light rounded-pill fw-bold bg-gradient bg-dark mt-2\" onClick={() =>resetArray(range)}>Generate New Array</button>\r\n        \r\n        {/* <button onClick={() =>testSortingAlgorithms()}>\r\n          Test Sorting Algorithms (BROKEN)\r\n        </button> */}\r\n        </div>\r\n        <div className=\"fixed-top mt-4\">\r\n          <button className=\"btn btn-sm btn-outline-dark rounded-pill m-2 px-3 fw-bold\" onClick={() =>mergeSort()}>Merge Sort</button>\r\n          <button className=\"btn btn-sm btn-outline-dark rounded-pill m-2 px-3 fw-bold\" onClick={() =>quickSort()}>Quick Sort</button>\r\n          <button className=\"btn btn-sm btn-outline-dark rounded-pill m-2 px-3 fw-bold\" onClick={() =>heapSort()}>Heap Sort</button>\r\n          <button className=\"btn btn-sm btn-outline-dark rounded-pill m-2 px-3 fw-bold\" onClick={() =>bubbleSort()}>Bubble Sort</button>\r\n        </div>\r\n        {/* <div className=\"author\">\r\n          Developed by Drigesh with ❤.\r\n        </div> */}\r\n        <div className=\"author\">\r\n          <a className=\"text-dark\" href=\"https://github.com/sitaram1027/sorting-visualizer/tree/main\"> <i class=\"fab fa-github\"></i> Github Repo</a>\r\n        </div>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default SortingVisualizer\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}